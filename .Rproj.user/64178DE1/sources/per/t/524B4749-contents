# 학급데이타 정리


## RStudio 시작하기 
이제 힘들게 설치한 R과 RStudio를 돌려보자. 윈도우 그림을 클릭해서 RStudio를 찾자. RStudio폴더를 클릭하면 동그란 파란색 배경의 RStudio 아이콘이 뜬다. 사정없이 클릭하자~ 그러면 RStudio가 위풍당당하게 뜬다. 처음에 RStudio 첫화면을 보면 "왜 이렇게 복잡해?"할 수도 있다. 아래한글, 엑셀화면만 보다가 세개로 분할된 창을 보면 *마이* 당황할 수 있다. 에러난거 아니니 격정마시길!


```{r rlogo, echo=FALSE, out.width = '10%', fig.align = "left", fig.cap="그림출처: http://clipart-library.com/clipart/14075.htm"}
knitr::include_graphics("img/startled.png")

```

RStudio 화면이 너무 복잡하다고 생각되면 잠시 학교 나이스(NEIS) 프로그램을 열어보자. 캡처사진처럼 사실 교육부 나이스 화면도 여러개 창으로 돼있다. 중앙의 메뉴바를 기준으로 왼쪽부터 '세부메뉴', 오른쪽에 '추진일정', '학교일지/전달사항', '업무요청내역'이 있다. 우리도 모르는 사이 4개의 창이 있는 컴퓨터 프로그램을 매일 쓰고 있었다~


캡처사진: 나이스


다시 RStudio화면으로 돌아오자. 다음 캡처사진을 보면 왼쪽 큰창이 콘솔(Console)창이다. 오른쪽 위쪽이 작업환경(Environment)창이고, 그 아랫쪽이 파일(Files)창이다. 콘솔창안의 오른쪽 텝 막대기를 보면 빗자루 그림이 있다. 바로 그 빗자루 옆에 겹쳐진 네모 두개가 있다. 거길 클릭하자!


캡처사진: RStudio RStudio screen


그러면 untitled라는 새로운 창이 뜬다. 이곳이 우리가 마르고 닯도록 작업할 창이다. 보통 텍스트 에디터(text editor)라 부르면 곳으로 여기서 코드를 입력한다. 그러면 결과가 콘솔창에 뜬다. 텍스트 에디터 창이 뜨면 RStudio에 네개의 창이 뜬다. 그래서 처음에만 세개의 창으로 보이지 실제 코딩할때는 다음 네개의 창이 항상 떠 있다. 


* 왼쪽창
  ** 텍스트 에디터(text editor) : 코드를 입력하는 곳
  ** 콘솔창(Console): 코드의 결과가 뜨는 곳 
* 오늘쪽창
  ** 작업환경(Environment)창
  ** 파일(Files)창



드디어 대망의 R코드를 입력할 시간이다! 둥둥둥~ 고심끝에 `install.packages("readxl")`로 결정했다. 뭔지 모르지만 무조건 입력해보자. 그러면 뭔지 모르는 또 다른 파일들이 왼쪽 콘솔창에 주루루 설치된다. `failed`라는 메시지가 뜨지 않았다면 성공이다.


명령어를 풀이해 보자. install라는 뭔가를 설치한다는 뜻이고, packages는 꾸러미라는 뜻이다. readxl은 왠지 글자는 아닌데 엑셀(Excel)같은 냄새가 난다. "코드꾸러미를 설치했다"라고 얘기하면 충분하다. 


그럼 readxl의 뜻은?


xl은 Excel의 옛 확장자 이름이다. ^[자료출처: https://fileinfo.com/extension/xl] 그러면 답 나왔네~ readxl은 엑셀파일을 읽는다는 뜻이다. 


> 파일 하나 읽는데 뭐 이래 번잡스러워?


아이콘을 클릭하는 프로그램을 쓰다가 명령어를 입력하는 프로그램을 쓰면 맨붕이 온다. 나도 그랬다. 전문용어로 아이콘 환경을 그래픽 사용자 인터페이스(Graphical User Interface: GUI) 방식이라 한다. 반면 명령어를 치는 R같은 방식은 명령어 인터페이스(Command-line Interface: CLI)^[https://en.wikipedia.org/wiki/Command-line_interface]라 한다.



마찬가지로 `install.packages("readxl")` 뭔지 모르겠지만 readxl이라는 코드꾸러미를 컴퓨터에 설치한다는 뜻으로 이해했다면 충분하다.   


* install.packages("readxl")

readxl패키지를 설치한 다음, library(readxl)라는 다음 명령어를 치자.
```{r, echo=TRUE, include = FALSE}
library(readxl)
```

install.packages("readxl")가 readxl이라는 패키지를 설치했다면, library(readxl)은 readxl을 활성화시키는 것이다. install 명령어가 readxl의 서고를 만들었다면 library는 그책을 꺼내는 것이다. 


## 파일 부르기
이제 엑셀 데이타파일을 불러보자. R에서 엑셀파일을 부르는 방법은 두 가지이다. 하나는 아이콘 메뉴를 쓰는 쉬운 방법이다. 또 하나는 명령어를 치는 어려운 방법이다. 


> "이 사람아 꽃길 놔두고 가시밭길 갈 필요는 없다고 보오~" 


악마의 달콤한 유혹같지만, 초보자는 쉬은 방법을 써도 된다. RStudio 오른쪽 사용환경(Environment)창을 보면 'Iport Dataset'이란 버튼이 눌러 다음순서데로 실행한다.

* 쉬운 방법
1. Environment
1. Import Dataset
1. From Excel
1. Browse 
1. 파일선택
1. Import 

'Browse'을 누르면 파일이 있는 폴더를 선택하라고 한다. 이 GUI화면은 선생님들에게 익숙할 것이다. 까잇것 이정도쯤이야!  Import누르면 그러면 다음과 같이 엑셀파일 자료가 뜬다. 혹 엑셀화면과 똑같은 화면을 기대해서 당황하셨나 모르겠다. 


캡처: Import Dataset화면 


* 어려운 방법
```{r echo=TRUE}
english <- read_excel("H:\\rdata\\english.xlsx", sheet = 'survey')
```



쉬운방법이 메뉴 클릭방식인 GUI라면, 어려운 방법은 명령어를 치는 방식이다. 명령어를 치는 것 까지만 해볼 만한데, 경로를 쓰고, sheet를 고르는게 부담스럽다. 필자도 그랬다. 그래서 R입문하고 한 1~2년간은 메뉴 클릭하는 방식을 썼다. 그러다 그게 숙달됐을때 직접 명령어를 쳐서 파일을 부르기 시작했다. 메뉴클릭이든 명령어입력이든 모로 가도 서울만 가면 된다~ 


주의사항 하나! 경로를 표시할때 '\\'가 아니라 '\\' 로 표시하는 이유가 있다. 경로표시 '\'가 메타문자가 아니라 글자그래의 '\'란 뜻으로 '\\'로 표시한다. 설명하니까 더 헷깔리나요? 비싼말로 정규식(Regualr expression: Regex)이라고 부르는 포로그램 문자열(string) 문법의 하나이다. 


어떤 선생님은 "명령어 방식이 더 쉬운거 아냐?" 반문할 수 있다. 맞다! 명령어방식이 익숙해지면 이게 더 쉽다. 게다가 코드를 기록하는 측면에서는 명령어방식이 더 좋다. 


이제 어려운 방법과 쉬운 방법으로 엑셀파일을 불렀으니 내용물을 살펴보자. 


## 파일 검색하기

```{r echo=TRUE, include=TRUE, comment=NA}
head(english)
```

파일을 검색하는 방법은 크게 2가지이다. head()는 파일의 앞쪽 데이타 5개를 부르고, tail()은 뒷쪽 5개를 부른다. english라는 데이타셋을 head()로 검색하면 반, 번호, 이름, 성별 등이 뜬다. 이제 여러분들은 데이타과학에 입문한 것이다. 외부 데이타파일을 불러다가 여러분의 컴퓨터에서 R로 검색했기 때문이다~ 빅데이타 시대인데 이렇게 작 데이터분석를 검새해도 되냐고 하는 선생님들이 계실수도 있다. 

이에 대해 R의 전설적 인물인 위컴과 그롤몬드는 'R을 활용한 데이터과학'에서 다음과 같이 대답했다.

> 자신들의 책은 자랑스럽게 메모리기반 스몰 데이타를 집중적으로 다룬다. 왜냐하면 작은 데이타를 다뤄봐야 빅데이타도 분석할 수 있기 때문이다.^[해들리위컴, 개럿 그롤몬드. 김설기, 최혜민(역). (2013). *R을 활용한 데이타 과학: 데이타 불러오기, 정리하기, 변형하기, 시각화하기, 모델링하기(3쇄).* 서울: 프로그래밍인사이트.]  


다시 english파일 분석으로 돌아오자. 혹시 설문을 빼먹은 학생이 있는지 확인하자. 엑셀데이타셋에서 구멍이 송송 뚫린 칸(cell)을 통계용어로 결측값이라 부른다. R에서 결측값은 사용할 수 없다는 뜻의 Not Available의 약자 na라고 부른다.   

```{r include=FALSE}
is.na(english)
```

is.na() 명령어는 "ns가 있나요?"라는 영어문장처럼 들린다. 결측값이 있으면 결과가 TRUE, 결측값이 없으면 FALSE로 나온다. 다행이 결측값이 0으로 나온다. 그럼 이번에는 설문응답을 하지 않은 결측값이 몇개인지 본다. 

```{r}
sum(is.na(english))
```

is.na() 명령어를 합계라는 뜻의 sum()으로 둘러싸면 "결측값이 몇개인가요?"라는 뜻의 명령어가 된다. 결과는 0으로 나온다. 결측값의 갯수의 총합이 0이라는 뜻이다. 


그러면 이번에는 엑셀 데이타셋의 열(colummn)로 결측값이 있는지 확인해 보자. 보통 데이타셋의 열은 데이타의 변수들이 되고, 가로인 행(row)는 관측치가 된다. is.na(english)를 colSums()이라는 명령어로둘러싸면 된다. 그러면 다음과 같이 각 열별로 결과가 나온다.  

```{r}
colSums(is.na(english))
```


이 역시 결과는 모두 0으로 나온다. 서문에서 밝혔듯이 연습용 데이타가 모두 가상데이타이기 때문에 첫 데이타 분석 연습파일에는 english에는 결측값이 없게 만들었다. 검색 명령어들을 처음 배우는 데 처음부터 결측값 제거 명령어까지 포함시키면 너무 어려울 것 같아 뺐다. 데이타에 결측값이 있으면 검색명령어에 결측값을 제거하고 검색한다는 명령어를 추가로 넣어야 검색이 된다.  *독자들의 수준을 너무 무시한 건 아니죠?*



## 엑셀파일 vs. CSV파일
학교에서 여러가지 숫자가 모여있는 데이타라는 엑셀이다.이런 데이타파일을 비싼 말로 데이타셋(dataset)이라 부른다. 말그래로 데이타가 여러개 모여있는 집합(set)이라는 뜻이다. 
엑셀은 세계에서 가장 많이 사용되는 통계프로그램이다. 통계프로그램이라고 의식 못할 정도로 대중화돼 있다. 


##  명령어 인터페이스(CLI) vs. 그래픽 사용자 인터페이스(GUI)
다음 장 넘어가기 전에 명령어 인터페이스(CLI)와 GUI에 대해 잠시 이바구를 풀어야 겠다. 혹 연식이 50대이상 되는 경력교사들은 개인용 컴퓨터가 도입되기 시작한 90년대때 잠시 나왔던 DOS시스템을 기억할거다. DOS는 Disk Operating System의 약자다. 명령어입력 방식으로 작동됐던 운영체제다. 당시 DOS가 얼마나 유명했는지 캠브리지 영어사전에 신조어로 등재됐을 정도다.^[캠브리지 영어사전 <https://dictionary.cambridge.org/dictionary/english/dos>] 


이후 GUI방식을 쓰는 윈도우 바람이 불어 DOS는 바람과 함께 사라진다. 흡사 라틴어가 사라진 언어같지만 영어속에 살아숨쉬는 것처럼 DOS도 윈도우안에서 CMD모드로 살아있다. 아래 사진을 보면 "아 이거!"라고 다들 한번씩 윈도우에 본 화면일 것이다. CMD는 command의 약자다. 학교 컴퓨터 유지보수 업체 기사님들이 까만 윈도우 CMD 모드를 작업하는 모습을 보면 전문가처럼 보일 정도다. 아참 윈도우10에서 CMD모드를 여는 단축키가 키보드의 윈도우그림키 + R이란 사실~ 


다음장으로 넘어가지 않고, 뜬금없이 그래픽 사용자 인터페이스(GUI)와 명령어 인터페이스(CLI)를 설명한 이유는 R이 CLI방식을 쓰기때문에 어렵게 느낄 수 있다는 것이다. 대학원에서 SPSS 통계프로그램을 배웠던 분들도 명령어 인터페이스 방식의 통계프로그램으로 넘어오는데 높은 진입장벽이 된다. 선생님들께서 지금 잘 따라오고 계시다는 얘기다.  


##  R vs. 파이썬

R과 파이썬 중 누가 쌘 데이타분석 강자냐? 인생이 게임이라 그런지 사람들은 호사가들의 질문에 혹한다. 마치 "슈퍼맨과 베트맨이 싸우면 누가 이기냐"라고 어렸을때 진지하게 남자애들이 했던 질문같다. 파이썬 역시 R과 더불어 전세계적으로다가 무지 핫하다. 결론부터 말하면 슈퍼맨이 배트맨을 이긴다. 배트맨이 슈퍼맨을 이길 수 없듯이 R이 프로그래밍 확장성면에서 파이썬을 이길 수는 없다. 


크립톤 행성이라는 외계 출신인 슈퍼맨과 지구인 출신 베트맨은 출신자체가 달라 갖고 있는 초능력의 클래스가 다르다. 마찬가지로 네델란드 프로그래머가 만든 파이썬과 뉴질랜드 통계학 교수가 만든 R은 태생부터 달라 그 능력치가 다르다. 둘다 데이타분석의 빅히어로지만 R과 파이썬은 같은 듯 다르다.  


R을 통계학과 교수 2명이 공동으로 만들었으니 얼마나 통계에 특화되었겠는가?  반면 Python은 전문 프로그래머의 취미로 우발적으로 탄생한 범용 프로그램이다. 범용 프로그램은 말그대로 여러가지 일을 할 수 있다는 뜻이다. 통계에 특화되서 탄생한 R과 일반 프로그래밍 언어로 탄생한 파이썬의 태생적 차이가 나타날 수 밖에 없다. 이쯤되면 예리한 독자가 한마디 할 수 있다. 


> 파이썬을 가르치지? 왜 R을 가르치냐?

3가지 정도다. 하나. 그래프 기능이 좋다. 둘. 통계적 모형 개발에 용이하다. 셋. 다양한 통계패키지들이 많다. Coursera라는 온라인 코딩 교육사이트에 나오는 얘기다.^[Coursera. (2021). Python or R for Data Analysis: Which Should I Learn?. 
https://www.coursera.org/articles/python-or-r-for-data-analysis?utm_source=gg&utm_medium=sem&utm_content=01-CatalogDSA-ML2-US&campaignid=12490862811&adgroupid=119269357576&device=c&keyword=&matchtype=b&network=g&devicemodel=&adpostion=&creativeid=503940597764&hide_mobile_promo&gclid=Cj0KCQjw3f6HBhDHARIsAD_i3D_hcI6alWxBSZs10p4JmFkjGZnpzCd4PCocz5kMsmqsJDqsqjD9jhcaAud9EALw_wcB] 


여기다가 필자의 경험을 더 한다면 R이 배우기가 더 쉽다. 통계학을 배운 사람들이 R이 배우기 더 쉽고, 반면 C++, 자바(Java)를 배운 사람들은 파이썬이 오히려 배우기 더 쉽다고 한다. 그래서 그런지 고등학교 정보시간에 파이썬 기초를 가르치고 파이썬을 대학 교양과목으로 가르친다. 예전 교양영어처럼 말이다. 대학 컴퓨터학과에서 C, Java를 배우기전 교육과정으로 편성하는 듯 하다. R은 주로 대학 통계학과에서 가르치고, 과목에 따라서 선별적으로 R을 가르친다. 예를 들어 문헌정보학과에서 텍스트분석 강의를 할때 R을 가르친다. 

> R이냐? 파이썬이냐?

한번쯤 해볼 수 있는 질문이지만 현업에서는 파이썬과 R을 둘다 사용한다고 한다. 먼저 배우고 나중에 배우는 차이다. 그러므로 "데이타분석 하기위해 R을 배워야 하는냐? 파이썬을 배워야 하느냐?" 는 그닥 생산적인 논쟁은 아니다. 알고보면 말이다~  


인기도로 치면 파이썬이 R은 능가한다. TIOBE, Stack Overflow, PYPL, RedMonk에 따르면 말이다. 이렇게 되는 이유는 한 2가지 정도. 파이썬이 프로그래밍 친화적이고, C를 학부에서 배우는 전산과 출신들에게 파이썬이 더 쉽다. 파이썬이 C를 단순화한 언어같다고 한다. 정보컴퓨터 선생님 말씀에 따르면 말이다. 짧은 내 파이썬 실력으로 봐도 C와 매우 비슷하다. 


여하튼 파이썬보다는 덜 하지만 R도 기존의 유명한  통계프로그램 강자 SPSS나 SAS에 비해서는 확장성이 크다. SPSS가 하기 힘든 지도그리기, 텍스트 분석, 구조방정식모형 등을 R이 할 수 있다. 하지만 파이썬보다는 확장성이 적은 건 사실이다. 현재론선 말이다. 이쯤에서 성질급한 앞자리 선생님께서 "R책에서 무슨 파이썬 이야기를 이리도 길게해?"라고 하길 같아 마무리한다. 일부독자의 어그로에도 불구하고 파이썬은 R책에서도 소개할 가치가 있는 훌륭한  데이타분석 프로그램이다. 파이썬의 인기는 전세계 데이타분석 인기투표에서 톱5위에 안에 드는 언어다^[Muenchen, R, A. (2020). The Popularity of Data Science Software. <http://r4stats.com/articles/popularity>] 


TIOBE 단체의 이름이 재미있어 언급한다. TIOBE는 정직함의 중요성(The Importance of Being Earnest)의 약자다. 프로그래머들이 낭만을 좀 아는게... 이게 '도리안 그레이의 초상'으로 유명한 아일랜드의 작가 오스카(Oscar Wilde)의 코메디 작품에 이름을 땄다. TIOBE는 매년 7월 컴퓨터 프로그래밍 언어 순위, 프로그래밍 언어 점유율을 발표한다. 






